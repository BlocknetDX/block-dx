build_linux:
  stage: build
  script:
    - mkdir -p $CI_PROJECT_DIR/linux
    - docker build -f Dockerfile-linux --build-arg GIT_BRANCH=$CI_COMMIT_REF_NAME -t blocknetdx/blockdx-ui-devbuilds:$CI_COMMIT_REF_NAME-$CI_COMMIT_SHA-linux .
    - if [ ! -z "$(docker ps -qa -f name=$CI_COMMIT_REF_NAME-$CI_COMMIT_SHA-linux)" ]; then docker rm $CI_COMMIT_REF_NAME-$CI_COMMIT_SHA-linux; fi
    - docker run --name=$CI_COMMIT_REF_NAME-$CI_COMMIT_SHA-linux blocknetdx/blockdx-ui-devbuilds:$CI_COMMIT_REF_NAME-$CI_COMMIT_SHA-linux
    - docker stop $CI_COMMIT_REF_NAME-$CI_COMMIT_SHA-linux
    - docker cp $CI_COMMIT_REF_NAME-$CI_COMMIT_SHA-linux:/opt/blockdx-ui/dist-native/. $CI_PROJECT_DIR/linux
    - if [ ! -z "$(docker ps -qa -f name=$CI_COMMIT_REF_NAME-$CI_COMMIT_SHA-linux)" ]; then docker rm $CI_COMMIT_REF_NAME-$CI_COMMIT_SHA-linux; fi
  artifacts:
    name: "BLOCKDX-$CI_COMMIT_REF_NAME-linux"
    paths:
     - linux/*.tar.gz
     - linux/*.AppImage
     - linux/*.deb

test_linux:
  stage: test
  script:
    - "[[ \"$CI_PROJECT_DIR/linux/*.tar.gz\" =~ \\.tar.gz$ ]]"
    - "[[ \"$CI_PROJECT_DIR/linux/*.AppImage\" =~ \\.AppImage$ ]]"
    - "[[ \"$CI_PROJECT_DIR/linux/*.deb\" =~ \\.deb$ ]]"

build_win:
  stage: build
  script:
    - mkdir -p $CI_PROJECT_DIR/win
    - docker build -f Dockerfile-win --build-arg GIT_BRANCH=$CI_COMMIT_REF_NAME -t blocknetdx/blockdx-ui-devbuilds:$CI_COMMIT_REF_NAME-$CI_COMMIT_SHA-win .
    - if [ ! -z "$(docker ps -qa -f name=$CI_COMMIT_REF_NAME-$CI_COMMIT_SHA-win)" ]; then docker rm $CI_COMMIT_REF_NAME-$CI_COMMIT_SHA-win; fi
    - docker run --name=$CI_COMMIT_REF_NAME-$CI_COMMIT_SHA-win blocknetdx/blockdx-ui-devbuilds:$CI_COMMIT_REF_NAME-$CI_COMMIT_SHA-win
    - docker stop $CI_COMMIT_REF_NAME-$CI_COMMIT_SHA-win
    - docker cp $CI_COMMIT_REF_NAME-$CI_COMMIT_SHA-win:/opt/blockdx-ui/dist-native/. $CI_PROJECT_DIR/win
    - if [ ! -z "$(docker ps -qa -f name=$CI_COMMIT_REF_NAME-$CI_COMMIT_SHA-win)" ]; then docker rm $CI_COMMIT_REF_NAME-$CI_COMMIT_SHA-win; fi
  artifacts:
    name: "BLOCKDX-$CI_COMMIT_REF_NAME-win"
    paths:
     - win/*.exe
     - win/*.zip

test_win:
  stage: test
  script:
    - "[[ \"$CI_PROJECT_DIR/win/*.exe\" =~ \\.exe$ ]]"
    - "[[ \"$CI_PROJECT_DIR/win/*.zip\" =~ \\.zip$ ]]"

build_mac:
  stage: build
  script:
    - mkdir -p $CI_PROJECT_DIR/mac
    - docker build -f Dockerfile-mac --build-arg GIT_BRANCH=$CI_COMMIT_REF_NAME -t blocknetdx/blockdx-ui-devbuilds:$CI_COMMIT_REF_NAME-$CI_COMMIT_SHA-mac .
    - if [ ! -z "$(docker ps -qa -f name=$CI_COMMIT_REF_NAME-$CI_COMMIT_SHA-mac)" ]; then docker rm $CI_COMMIT_REF_NAME-$CI_COMMIT_SHA-mac; fi
    - docker run --name=$CI_COMMIT_REF_NAME-$CI_COMMIT_SHA-mac blocknetdx/blockdx-ui-devbuilds:$CI_COMMIT_REF_NAME-$CI_COMMIT_SHA-mac
    - docker stop $CI_COMMIT_REF_NAME-$CI_COMMIT_SHA-mac
    - docker cp $CI_COMMIT_REF_NAME-$CI_COMMIT_SHA-mac:/opt/blockdx-ui/dist-native/. $CI_PROJECT_DIR/mac
    - if [ ! -z "$(docker ps -qa -f name=$CI_COMMIT_REF_NAME-$CI_COMMIT_SHA-mac)" ]; then docker rm $CI_COMMIT_REF_NAME-$CI_COMMIT_SHA-mac; fi
  artifacts:
    name: "BLOCKDX-$CI_COMMIT_REF_NAME-mac"
    paths:
     - mac/*.zip

test_mac:
  stage: test
  script:
    - "[[ \"$CI_PROJECT_DIR/mac/*.zip\" =~ \\.zip$ ]]"
